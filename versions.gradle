/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
// A
versions.activity = '1.4.0'
versions.android_gradle_plugin = '7.4.2'
versions.annotations = "1.2.0"
versions.apache_commons = "2.5"
versions.appcompat = "1.6.1"
versions.arch_core = "2.1.0"
versions.atsl_core = "1.2.0"
versions.atsl_junit = "1.1.2"
versions.atsl_rules = "1.2.0"
versions.atsl_runner = "1.2.0"
// B
versions.benchmark = "1.1.0-alpha01"

// C
versions.cardview = "1.0.0"
versions.constraint_layout = "2.1.4"
versions.core_ktx = "1.10.1"
versions.coroutines = "1.6.4"
versions.chucker_lib = "3.5.2"
versions.chucker_lib_no_op = "3.5.2"
versions.coordinatorlayout = "1.2.0"
versions.corouselview = "0.1.5"

// D
versions.dagger = "2.16"
versions.dagger_hilt_version = '2.43.2'
versions.dagger_hilt_compiler = '2.43.2'
versions.dexmaker = "2.2.0"
versions.data_store = "1.0.0"

// E
versions.espresso = "3.5.1"

// F
versions.fragment = "1.4.1"
versions.firebase_bom = "32.0.0"
versions.firebase_auth_ui = "7.2.0"

// G
versions.glide = "4.13.0"
versions.gms_maps = "18.1.0"
versions.gms_location = "19.0.1"
versions.gms_google_services = "4.3.15"
versions.gms_play_services_auth = "20.5.0"

// H
versions.hilt_android_gradle_plugin = '2.43.2'
versions.hamcrest = "1.3"

// I

// J
versions.junit = "4.13.2"

// K
versions.kotlin = "1.8.20"
versions.kotlinx_serialization_json = "1.2.1"

// L
versions.lifecycle = "2.5.1"

// M
versions.material = "1.9.0"
versions.mockito = "4.5.0"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.25.0"
versions.mockito_kotlin = "1.6.0"
versions.mockwebserver = "3.8.1"

// N
versions.navigation = "2.5.1"

// O
versions.okhttp_logging_interceptor = "4.10.0"

// P
versions.paging = "3.1.1"

// Q

// R
versions.recyclerview = "1.2.1"
versions.retrofit = "2.9.0"
versions.robolectric = "4.2"
versions.room = "2.5.1"
versions.rx_android = "2.0.1"
versions.rxjava2 = "2.1.3"

// S
versions.swiperefreshlayout = "1.1.0"

// T
versions.timber = "4.7.1"
versions.transition = "1.4.1"
versions.truth = "1.0.1"

// U
// V
// W
versions.work = "2.8.1"

// X
// Y
// Z

ext.versions = versions

def build_versions = [:]
build_versions.min_sdk = 24
build_versions.compile_sdk = 33
build_versions.target_sdk = 33
build_versions.build_tools = "34.0.0"
ext.build_versions = build_versions

def deps = [:]
//Firebase
deps.firebase_messaging_ktx = "com.google.firebase:firebase-messaging-ktx"
deps.firebase_auth_ktx = "com.google.firebase:firebase-auth-ktx"
deps.firebase_auth_ui = "com.firebaseui:firebase-ui-auth:$versions.firebase_auth_ui"
deps.firebase_analytics_ktx = "com.google.firebase:firebase-analytics-ktx"
//If firebase bom is added then no need to add versions for any of firebase dependency
deps.firebase_bom = "com.google.firebase:firebase-bom:$versions.firebase_bom"

//kotlinx serialization json
deps.kotlinx_serialization_json = "org.jetbrains.kotlinx:kotlinx-serialization-json:$versions.kotlinx_serialization_json"


def activity = [:]
activity.activity_ktx = "androidx.activity:activity-ktx:$versions.activity"
deps.activity = activity

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
//Data store alternative to shared preferences
// Typed DataStore (Typed API surface, such as Proto)
deps.data_store_typed = "androidx.datastore:datastore:$versions.data_store"
deps.data_store_typed_core = "androidx.datastore:datastore-core:$versions.data_store"
// Preferences DataStore (SharedPreferences like APIs)
deps.data_store_preferences = "androidx.datastore:datastore-preferences:$versions.data_store"
// Alternatively - use the following artifact without an Android dependency.
deps.data_store_preferences_core = "androidx.datastore:datastore-preferences-core:$versions.data_store"

//Others
deps.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"
deps.coordinatorlayout = "androidx.coordinatorlayout:coordinatorlayout:$versions.coordinatorlayout"
deps.corouselview = "com.synnapps:carouselview:$versions.corouselview"
deps.facebook_shimmer = "com.facebook.shimmer:shimmer:0.5.0"
deps.legacy_v4 = "androidx.legacy:legacy-support-v4:1.0.0"
deps.multidex = "androidx.multidex:multidex:2.0.1"
deps.chucker_lib = "com.github.chuckerteam.chucker:library:$versions.chucker_lib"
deps.chucker_lib_no_op = "com.github.chuckerteam.chucker:library:$versions.chucker_lib_no_op"


deps.annotations = "androidx.annotation:annotation:$versions.annotations"
deps.viewanimations = "com.daimajia.androidanimations:library:2.4@aar"
deps.gms_maps = "com.google.android.gms:play-services-maps:$versions.gms_maps"
deps.gms_location = "com.google.android.gms:play-services-location:$versions.gms_location"
deps.gms_google_services = "com.google.gms:google-services:$versions.gms_google_services"
deps.gms_play_services_auth = "com.google.android.gms:play-services-auth:$versions.gms_play_services_auth"
deps.circleimageview = "implementation 'de.hdodenhof:circleimageview:3.1.0"
deps.expandablelayout = "com.github.skydoves:expandablelayout:1.0.7"

deps.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:$versions.arch_core"
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def atsl = [:]
atsl.core = "androidx.test:core:$versions.atsl_core"
atsl.ext_junit = "androidx.test.ext:junit:$versions.atsl_junit"
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_rules"
deps.atsl = atsl

deps.benchmark = "androidx.benchmark:benchmark-junit4:$versions.benchmark"
deps.benchmark_gradle = "androidx.benchmark:benchmark-gradle-plugin:$versions.benchmark"

deps.cardview = "androidx.cardview:cardview:$versions.cardview"

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
coroutines.core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
deps.coroutines = coroutines

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:${versions.fragment}"
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
fragment.testing = "androidx.fragment:fragment-testing:${versions.fragment}"
deps.fragment = fragment

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"

deps.junit = "junit:junit:$versions.junit"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.serializationPlugin = "org.jetbrains.kotlin:kotlin-serialization:$versions.kotlin"
deps.kotlin = kotlin

//Hilt
def hilt = [:]
hilt.gradle_plugin = "com.google.dagger:hilt-android-gradle-plugin:$versions.hilt_android_gradle_plugin"
hilt.android = "com.google.dagger:hilt-android:$versions.dagger_hilt_version"
hilt.android_compiler = "com.google.dagger:hilt-android-compiler:$versions.dagger_hilt_compiler"
deps.hilt = hilt


def lifecycle = [:]
lifecycle.runtime_ktx = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

deps.material = "com.google.android.material:material:$versions.material"

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito"
mockito.kotlin = "com.nhaarman:mockito-kotlin-kt1.1:$versions.mockito_kotlin"
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

deps.paging_runtime = "androidx.paging:paging-runtime:$versions.paging"

deps.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"

deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

deps.timber = "com.jakewharton.timber:timber:$versions.timber"

deps.transition = "androidx.transition:transition:$versions.transition"

deps.truth = "com.google.truth:truth:$versions.truth"

def work = [:]
work.runtime = "androidx.work:work-runtime:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
work.firebase = "androidx.work:work-firebase:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
deps.work = work

ext.deps = deps

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

ext.addRepos = this.&addRepos
